/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Test_H
#define Test_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "test_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TestIf {
 public:
  virtual ~TestIf() {}
  virtual int32_t add(const int32_t a, const int32_t b) = 0;
  virtual void getById(User& _return, const int64_t id) = 0;
};

class TestIfFactory {
 public:
  typedef TestIf Handler;

  virtual ~TestIfFactory() {}

  virtual TestIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TestIf* /* handler */) = 0;
};

class TestIfSingletonFactory : virtual public TestIfFactory {
 public:
  TestIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TestIf>& iface) : iface_(iface) {}
  virtual ~TestIfSingletonFactory() {}

  virtual TestIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TestIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TestIf> iface_;
};

class TestNull : virtual public TestIf {
 public:
  virtual ~TestNull() {}
  int32_t add(const int32_t /* a */, const int32_t /* b */) {
    int32_t _return = 0;
    return _return;
  }
  void getById(User& /* _return */, const int64_t /* id */) {
    return;
  }
};

typedef struct _Test_add_args__isset {
  _Test_add_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _Test_add_args__isset;

class Test_add_args {
 public:

  Test_add_args(const Test_add_args&);
  Test_add_args& operator=(const Test_add_args&);
  Test_add_args() : a(0), b(0) {
  }

  virtual ~Test_add_args() throw();
  int32_t a;
  int32_t b;

  _Test_add_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const int32_t val);

  bool operator == (const Test_add_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const Test_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Test_add_pargs {
 public:


  virtual ~Test_add_pargs() throw();
  const int32_t* a;
  const int32_t* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Test_add_result__isset {
  _Test_add_result__isset() : success(false) {}
  bool success :1;
} _Test_add_result__isset;

class Test_add_result {
 public:

  Test_add_result(const Test_add_result&);
  Test_add_result& operator=(const Test_add_result&);
  Test_add_result() : success(0) {
  }

  virtual ~Test_add_result() throw();
  int32_t success;

  _Test_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Test_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Test_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Test_add_presult__isset {
  _Test_add_presult__isset() : success(false) {}
  bool success :1;
} _Test_add_presult__isset;

class Test_add_presult {
 public:


  virtual ~Test_add_presult() throw();
  int32_t* success;

  _Test_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Test_getById_args__isset {
  _Test_getById_args__isset() : id(false) {}
  bool id :1;
} _Test_getById_args__isset;

class Test_getById_args {
 public:

  Test_getById_args(const Test_getById_args&);
  Test_getById_args& operator=(const Test_getById_args&);
  Test_getById_args() : id(0) {
  }

  virtual ~Test_getById_args() throw();
  int64_t id;

  _Test_getById_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const Test_getById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Test_getById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test_getById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Test_getById_pargs {
 public:


  virtual ~Test_getById_pargs() throw();
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Test_getById_result__isset {
  _Test_getById_result__isset() : success(false) {}
  bool success :1;
} _Test_getById_result__isset;

class Test_getById_result {
 public:

  Test_getById_result(const Test_getById_result&);
  Test_getById_result& operator=(const Test_getById_result&);
  Test_getById_result() {
  }

  virtual ~Test_getById_result() throw();
  User success;

  _Test_getById_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const Test_getById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Test_getById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test_getById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Test_getById_presult__isset {
  _Test_getById_presult__isset() : success(false) {}
  bool success :1;
} _Test_getById_presult__isset;

class Test_getById_presult {
 public:


  virtual ~Test_getById_presult() throw();
  User* success;

  _Test_getById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TestClient : virtual public TestIf {
 public:
  TestClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add(const int32_t a, const int32_t b);
  void send_add(const int32_t a, const int32_t b);
  int32_t recv_add();
  void getById(User& _return, const int64_t id);
  void send_getById(const int64_t id);
  void recv_getById(User& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TestIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TestProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TestProcessor(::apache::thrift::stdcxx::shared_ptr<TestIf> iface) :
    iface_(iface) {
    processMap_["add"] = &TestProcessor::process_add;
    processMap_["getById"] = &TestProcessor::process_getById;
  }

  virtual ~TestProcessor() {}
};

class TestProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TestProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TestIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TestIfFactory > handlerFactory_;
};

class TestMultiface : virtual public TestIf {
 public:
  TestMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TestIf> > ifaces_;
  TestMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t add(const int32_t a, const int32_t b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(a, b);
    }
    return ifaces_[i]->add(a, b);
  }

  void getById(User& _return, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getById(_return, id);
    }
    ifaces_[i]->getById(_return, id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TestConcurrentClient : virtual public TestIf {
 public:
  TestConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add(const int32_t a, const int32_t b);
  int32_t send_add(const int32_t a, const int32_t b);
  int32_t recv_add(const int32_t seqid);
  void getById(User& _return, const int64_t id);
  int32_t send_getById(const int64_t id);
  void recv_getById(User& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
